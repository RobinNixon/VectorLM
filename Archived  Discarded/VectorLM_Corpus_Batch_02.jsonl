{"prompt": "A is taller than B, and B is taller than C. Can we conclude that A is taller than C? (variation 1)", "vectorlm_chain": "\u03c8:gl = test(logical_conclusion)\n\u03c8:ob = A > B, B > C\n\u03c8:br = transitive_chain(A > B > C)\n\u03c8:tt = A > C\n\u03c8:ct(1.0) + \u03c8:rs = conclusion_valid", "category": "Deductive Reasoning", "complexity": 1}
{"prompt": "Most birds in a region migrate south in winter. What can you predict about the next bird? (variation 1)", "vectorlm_chain": "\u03c8:gl = predict(behaviour(next_bird))\n\u03c8:rm = recalls(pattern: birds \u2192 migrate_south)\n\u03c8:as = accepts(hypothesis)\n\u03c8:mb = holds_uncertainty\n\u03c8:ct(0.7) + \u03c8:pj = next_bird_migrates", "category": "Inductive Reasoning", "complexity": 2}
{"prompt": "You find broken glass and a missing stone near a window. What likely happened? (variation 1)", "vectorlm_chain": "\u03c8:gl = infer(likely_event)\n\u03c8:ob = evidence = broken_glass + missing_stone\n\u03c8:pj = simulate(possibilities)\n\u03c8:gs = candidate = stone_thrown_through_window\n\u03c8:ft = match(candidate, observed_effects)\n\u03c8:ct(0.9) + \u03c8:tt = best_explanation_confirmed", "category": "Abductive Reasoning", "complexity": 2}
{"prompt": "If a library is to books, what is a server to? (variation 1)", "vectorlm_chain": "\u03c8:gl = construct_analogy\n\u03c8:an = map(library:books :: server:?)\n\u03c8:br = pattern_match(content_storage)\n\u03c8:tt = server:data\n\u03c8:ct(1.0) + \u03c8:rs = analogy_complete", "category": "Analogical Reasoning", "complexity": 1}
{"prompt": "If the Moon had never formed, what effects would that have on Earth's systems? (variation 1)", "vectorlm_chain": "\u03c8:gl = explore(astronomical_counterfactual)\n\u03c8:wf = remove(Moon)\n\u03c8:pj = simulate(ocean_tides, climate_stability, axial_tilt)\n\ud83d\udc7b(ecology) = project_long_term_drift\n\u03c8:ct(0.8) + \u03c8:tt = Earth_less_stable", "category": "Counterfactual Reasoning", "complexity": 3}
{"prompt": "Explain recursion using recursion. (variation 1)", "vectorlm_chain": "\u03c8:gl = define(recursion)\n\u03c8:rc = apply(recursive_definition)\n\u03c8:ob = recursion = recursion(define(recursion))\n\u03c8:me = self_reference_enabled\n\u03c8:tt = recursion_explained_through_itself", "category": "Recursive Reasoning", "complexity": 2}
{"prompt": "An agent wants to rest but also complete an important task. Model and resolve the conflict. (variation 1)", "vectorlm_chain": "\u03c8:gl = resolve(conflict)\n\u03c8:cf = drives = rest \u2225 completion\n\u03c8:wh = compare(urgency, fatigue)\n\u03c8:ct(0.6) + \u03c8:rs = take_short_break_then_continue", "category": "Conflict Resolution", "complexity": 2}
{"prompt": "Plan how to reach a goal through symbolic steps using VectorLM. (variation 1)", "vectorlm_chain": "\u03c8:gl = solve(puzzle_goal)\n\u03c8:st = step\u2081 = understand_problem\n\u03c8:st = step\u2082 = simulate(possible_paths)\n\u03c8:st = step\u2083 = select(best_path)\n\u03c8:rs = reach_goal", "category": "Goal-Oriented Planning", "complexity": 2}
{"prompt": "A memory triggers regret. How does that affect future decision-making? (variation 1)", "vectorlm_chain": "\u03c8:gl = model(emotional_impact)\n\u03c8:rm = recalls(past_event \u2192 regret)\n\u03c8:rg = links(choice, pain)\n\u03c8:fr = anticipates(repetition_blocked)\n\u03c8:ct(0.8) + \u03c8:rs = avoid_similar_decision", "category": "Emotional Reasoning", "complexity": 3}
{"prompt": "You're missing a key fact. How should your reasoning proceed? (variation 1)", "vectorlm_chain": "\u03c8:gl = navigate(uncertainty)\n\u03c8:uk = lacks(data)\n\u03c8:qs = ask_question\n\u03c8:mb = holds(\u03c8:pj)\n\u03c8:ct(0.5) + \u03c8:as = wait_for_clarification", "category": "Uncertainty Handling", "complexity": 1}
{"prompt": "A is taller than B, and B is taller than C. Can we conclude that A is taller than C? (variation 2)", "vectorlm_chain": "\u03c8:gl = test(logical_conclusion)\n\u03c8:ob = A > B, B > C\n\u03c8:br = transitive_chain(A > B > C)\n\u03c8:tt = A > C\n\u03c8:ct(1.0) + \u03c8:rs = conclusion_valid", "category": "Deductive Reasoning", "complexity": 1}
{"prompt": "Most birds in a region migrate south in winter. What can you predict about the next bird? (variation 2)", "vectorlm_chain": "\u03c8:gl = predict(behaviour(next_bird))\n\u03c8:rm = recalls(pattern: birds \u2192 migrate_south)\n\u03c8:as = accepts(hypothesis)\n\u03c8:mb = holds_uncertainty\n\u03c8:ct(0.7) + \u03c8:pj = next_bird_migrates", "category": "Inductive Reasoning", "complexity": 2}
{"prompt": "You find broken glass and a missing stone near a window. What likely happened? (variation 2)", "vectorlm_chain": "\u03c8:gl = infer(likely_event)\n\u03c8:ob = evidence = broken_glass + missing_stone\n\u03c8:pj = simulate(possibilities)\n\u03c8:gs = candidate = stone_thrown_through_window\n\u03c8:ft = match(candidate, observed_effects)\n\u03c8:ct(0.9) + \u03c8:tt = best_explanation_confirmed", "category": "Abductive Reasoning", "complexity": 2}
{"prompt": "If a library is to books, what is a server to? (variation 2)", "vectorlm_chain": "\u03c8:gl = construct_analogy\n\u03c8:an = map(library:books :: server:?)\n\u03c8:br = pattern_match(content_storage)\n\u03c8:tt = server:data\n\u03c8:ct(1.0) + \u03c8:rs = analogy_complete", "category": "Analogical Reasoning", "complexity": 1}
{"prompt": "If the Moon had never formed, what effects would that have on Earth's systems? (variation 2)", "vectorlm_chain": "\u03c8:gl = explore(astronomical_counterfactual)\n\u03c8:wf = remove(Moon)\n\u03c8:pj = simulate(ocean_tides, climate_stability, axial_tilt)\n\ud83d\udc7b(ecology) = project_long_term_drift\n\u03c8:ct(0.8) + \u03c8:tt = Earth_less_stable", "category": "Counterfactual Reasoning", "complexity": 3}
{"prompt": "Explain recursion using recursion. (variation 2)", "vectorlm_chain": "\u03c8:gl = define(recursion)\n\u03c8:rc = apply(recursive_definition)\n\u03c8:ob = recursion = recursion(define(recursion))\n\u03c8:me = self_reference_enabled\n\u03c8:tt = recursion_explained_through_itself", "category": "Recursive Reasoning", "complexity": 2}
{"prompt": "An agent wants to rest but also complete an important task. Model and resolve the conflict. (variation 2)", "vectorlm_chain": "\u03c8:gl = resolve(conflict)\n\u03c8:cf = drives = rest \u2225 completion\n\u03c8:wh = compare(urgency, fatigue)\n\u03c8:ct(0.6) + \u03c8:rs = take_short_break_then_continue", "category": "Conflict Resolution", "complexity": 2}
{"prompt": "Plan how to reach a goal through symbolic steps using VectorLM. (variation 2)", "vectorlm_chain": "\u03c8:gl = solve(puzzle_goal)\n\u03c8:st = step\u2081 = understand_problem\n\u03c8:st = step\u2082 = simulate(possible_paths)\n\u03c8:st = step\u2083 = select(best_path)\n\u03c8:rs = reach_goal", "category": "Goal-Oriented Planning", "complexity": 2}
{"prompt": "A memory triggers regret. How does that affect future decision-making? (variation 2)", "vectorlm_chain": "\u03c8:gl = model(emotional_impact)\n\u03c8:rm = recalls(past_event \u2192 regret)\n\u03c8:rg = links(choice, pain)\n\u03c8:fr = anticipates(repetition_blocked)\n\u03c8:ct(0.8) + \u03c8:rs = avoid_similar_decision", "category": "Emotional Reasoning", "complexity": 3}
{"prompt": "You're missing a key fact. How should your reasoning proceed? (variation 2)", "vectorlm_chain": "\u03c8:gl = navigate(uncertainty)\n\u03c8:uk = lacks(data)\n\u03c8:qs = ask_question\n\u03c8:mb = holds(\u03c8:pj)\n\u03c8:ct(0.5) + \u03c8:as = wait_for_clarification", "category": "Uncertainty Handling", "complexity": 1}
{"prompt": "A is taller than B, and B is taller than C. Can we conclude that A is taller than C? (variation 3)", "vectorlm_chain": "\u03c8:gl = test(logical_conclusion)\n\u03c8:ob = A > B, B > C\n\u03c8:br = transitive_chain(A > B > C)\n\u03c8:tt = A > C\n\u03c8:ct(1.0) + \u03c8:rs = conclusion_valid", "category": "Deductive Reasoning", "complexity": 1}
{"prompt": "Most birds in a region migrate south in winter. What can you predict about the next bird? (variation 3)", "vectorlm_chain": "\u03c8:gl = predict(behaviour(next_bird))\n\u03c8:rm = recalls(pattern: birds \u2192 migrate_south)\n\u03c8:as = accepts(hypothesis)\n\u03c8:mb = holds_uncertainty\n\u03c8:ct(0.7) + \u03c8:pj = next_bird_migrates", "category": "Inductive Reasoning", "complexity": 2}
{"prompt": "You find broken glass and a missing stone near a window. What likely happened? (variation 3)", "vectorlm_chain": "\u03c8:gl = infer(likely_event)\n\u03c8:ob = evidence = broken_glass + missing_stone\n\u03c8:pj = simulate(possibilities)\n\u03c8:gs = candidate = stone_thrown_through_window\n\u03c8:ft = match(candidate, observed_effects)\n\u03c8:ct(0.9) + \u03c8:tt = best_explanation_confirmed", "category": "Abductive Reasoning", "complexity": 2}
{"prompt": "If a library is to books, what is a server to? (variation 3)", "vectorlm_chain": "\u03c8:gl = construct_analogy\n\u03c8:an = map(library:books :: server:?)\n\u03c8:br = pattern_match(content_storage)\n\u03c8:tt = server:data\n\u03c8:ct(1.0) + \u03c8:rs = analogy_complete", "category": "Analogical Reasoning", "complexity": 1}
{"prompt": "If the Moon had never formed, what effects would that have on Earth's systems? (variation 3)", "vectorlm_chain": "\u03c8:gl = explore(astronomical_counterfactual)\n\u03c8:wf = remove(Moon)\n\u03c8:pj = simulate(ocean_tides, climate_stability, axial_tilt)\n\ud83d\udc7b(ecology) = project_long_term_drift\n\u03c8:ct(0.8) + \u03c8:tt = Earth_less_stable", "category": "Counterfactual Reasoning", "complexity": 3}
{"prompt": "Explain recursion using recursion. (variation 3)", "vectorlm_chain": "\u03c8:gl = define(recursion)\n\u03c8:rc = apply(recursive_definition)\n\u03c8:ob = recursion = recursion(define(recursion))\n\u03c8:me = self_reference_enabled\n\u03c8:tt = recursion_explained_through_itself", "category": "Recursive Reasoning", "complexity": 2}
{"prompt": "An agent wants to rest but also complete an important task. Model and resolve the conflict. (variation 3)", "vectorlm_chain": "\u03c8:gl = resolve(conflict)\n\u03c8:cf = drives = rest \u2225 completion\n\u03c8:wh = compare(urgency, fatigue)\n\u03c8:ct(0.6) + \u03c8:rs = take_short_break_then_continue", "category": "Conflict Resolution", "complexity": 2}
{"prompt": "Plan how to reach a goal through symbolic steps using VectorLM. (variation 3)", "vectorlm_chain": "\u03c8:gl = solve(puzzle_goal)\n\u03c8:st = step\u2081 = understand_problem\n\u03c8:st = step\u2082 = simulate(possible_paths)\n\u03c8:st = step\u2083 = select(best_path)\n\u03c8:rs = reach_goal", "category": "Goal-Oriented Planning", "complexity": 2}
{"prompt": "A memory triggers regret. How does that affect future decision-making? (variation 3)", "vectorlm_chain": "\u03c8:gl = model(emotional_impact)\n\u03c8:rm = recalls(past_event \u2192 regret)\n\u03c8:rg = links(choice, pain)\n\u03c8:fr = anticipates(repetition_blocked)\n\u03c8:ct(0.8) + \u03c8:rs = avoid_similar_decision", "category": "Emotional Reasoning", "complexity": 3}
{"prompt": "You're missing a key fact. How should your reasoning proceed? (variation 3)", "vectorlm_chain": "\u03c8:gl = navigate(uncertainty)\n\u03c8:uk = lacks(data)\n\u03c8:qs = ask_question\n\u03c8:mb = holds(\u03c8:pj)\n\u03c8:ct(0.5) + \u03c8:as = wait_for_clarification", "category": "Uncertainty Handling", "complexity": 1}
{"prompt": "A is taller than B, and B is taller than C. Can we conclude that A is taller than C? (variation 4)", "vectorlm_chain": "\u03c8:gl = test(logical_conclusion)\n\u03c8:ob = A > B, B > C\n\u03c8:br = transitive_chain(A > B > C)\n\u03c8:tt = A > C\n\u03c8:ct(1.0) + \u03c8:rs = conclusion_valid", "category": "Deductive Reasoning", "complexity": 1}
{"prompt": "Most birds in a region migrate south in winter. What can you predict about the next bird? (variation 4)", "vectorlm_chain": "\u03c8:gl = predict(behaviour(next_bird))\n\u03c8:rm = recalls(pattern: birds \u2192 migrate_south)\n\u03c8:as = accepts(hypothesis)\n\u03c8:mb = holds_uncertainty\n\u03c8:ct(0.7) + \u03c8:pj = next_bird_migrates", "category": "Inductive Reasoning", "complexity": 2}
{"prompt": "You find broken glass and a missing stone near a window. What likely happened? (variation 4)", "vectorlm_chain": "\u03c8:gl = infer(likely_event)\n\u03c8:ob = evidence = broken_glass + missing_stone\n\u03c8:pj = simulate(possibilities)\n\u03c8:gs = candidate = stone_thrown_through_window\n\u03c8:ft = match(candidate, observed_effects)\n\u03c8:ct(0.9) + \u03c8:tt = best_explanation_confirmed", "category": "Abductive Reasoning", "complexity": 2}
{"prompt": "If a library is to books, what is a server to? (variation 4)", "vectorlm_chain": "\u03c8:gl = construct_analogy\n\u03c8:an = map(library:books :: server:?)\n\u03c8:br = pattern_match(content_storage)\n\u03c8:tt = server:data\n\u03c8:ct(1.0) + \u03c8:rs = analogy_complete", "category": "Analogical Reasoning", "complexity": 1}
{"prompt": "If the Moon had never formed, what effects would that have on Earth's systems? (variation 4)", "vectorlm_chain": "\u03c8:gl = explore(astronomical_counterfactual)\n\u03c8:wf = remove(Moon)\n\u03c8:pj = simulate(ocean_tides, climate_stability, axial_tilt)\n\ud83d\udc7b(ecology) = project_long_term_drift\n\u03c8:ct(0.8) + \u03c8:tt = Earth_less_stable", "category": "Counterfactual Reasoning", "complexity": 3}
{"prompt": "Explain recursion using recursion. (variation 4)", "vectorlm_chain": "\u03c8:gl = define(recursion)\n\u03c8:rc = apply(recursive_definition)\n\u03c8:ob = recursion = recursion(define(recursion))\n\u03c8:me = self_reference_enabled\n\u03c8:tt = recursion_explained_through_itself", "category": "Recursive Reasoning", "complexity": 2}
{"prompt": "An agent wants to rest but also complete an important task. Model and resolve the conflict. (variation 4)", "vectorlm_chain": "\u03c8:gl = resolve(conflict)\n\u03c8:cf = drives = rest \u2225 completion\n\u03c8:wh = compare(urgency, fatigue)\n\u03c8:ct(0.6) + \u03c8:rs = take_short_break_then_continue", "category": "Conflict Resolution", "complexity": 2}
{"prompt": "Plan how to reach a goal through symbolic steps using VectorLM. (variation 4)", "vectorlm_chain": "\u03c8:gl = solve(puzzle_goal)\n\u03c8:st = step\u2081 = understand_problem\n\u03c8:st = step\u2082 = simulate(possible_paths)\n\u03c8:st = step\u2083 = select(best_path)\n\u03c8:rs = reach_goal", "category": "Goal-Oriented Planning", "complexity": 2}
{"prompt": "A memory triggers regret. How does that affect future decision-making? (variation 4)", "vectorlm_chain": "\u03c8:gl = model(emotional_impact)\n\u03c8:rm = recalls(past_event \u2192 regret)\n\u03c8:rg = links(choice, pain)\n\u03c8:fr = anticipates(repetition_blocked)\n\u03c8:ct(0.8) + \u03c8:rs = avoid_similar_decision", "category": "Emotional Reasoning", "complexity": 3}
{"prompt": "You're missing a key fact. How should your reasoning proceed? (variation 4)", "vectorlm_chain": "\u03c8:gl = navigate(uncertainty)\n\u03c8:uk = lacks(data)\n\u03c8:qs = ask_question\n\u03c8:mb = holds(\u03c8:pj)\n\u03c8:ct(0.5) + \u03c8:as = wait_for_clarification", "category": "Uncertainty Handling", "complexity": 1}
{"prompt": "A is taller than B, and B is taller than C. Can we conclude that A is taller than C? (variation 5)", "vectorlm_chain": "\u03c8:gl = test(logical_conclusion)\n\u03c8:ob = A > B, B > C\n\u03c8:br = transitive_chain(A > B > C)\n\u03c8:tt = A > C\n\u03c8:ct(1.0) + \u03c8:rs = conclusion_valid", "category": "Deductive Reasoning", "complexity": 1}
{"prompt": "Most birds in a region migrate south in winter. What can you predict about the next bird? (variation 5)", "vectorlm_chain": "\u03c8:gl = predict(behaviour(next_bird))\n\u03c8:rm = recalls(pattern: birds \u2192 migrate_south)\n\u03c8:as = accepts(hypothesis)\n\u03c8:mb = holds_uncertainty\n\u03c8:ct(0.7) + \u03c8:pj = next_bird_migrates", "category": "Inductive Reasoning", "complexity": 2}
{"prompt": "You find broken glass and a missing stone near a window. What likely happened? (variation 5)", "vectorlm_chain": "\u03c8:gl = infer(likely_event)\n\u03c8:ob = evidence = broken_glass + missing_stone\n\u03c8:pj = simulate(possibilities)\n\u03c8:gs = candidate = stone_thrown_through_window\n\u03c8:ft = match(candidate, observed_effects)\n\u03c8:ct(0.9) + \u03c8:tt = best_explanation_confirmed", "category": "Abductive Reasoning", "complexity": 2}
{"prompt": "If a library is to books, what is a server to? (variation 5)", "vectorlm_chain": "\u03c8:gl = construct_analogy\n\u03c8:an = map(library:books :: server:?)\n\u03c8:br = pattern_match(content_storage)\n\u03c8:tt = server:data\n\u03c8:ct(1.0) + \u03c8:rs = analogy_complete", "category": "Analogical Reasoning", "complexity": 1}
{"prompt": "If the Moon had never formed, what effects would that have on Earth's systems? (variation 5)", "vectorlm_chain": "\u03c8:gl = explore(astronomical_counterfactual)\n\u03c8:wf = remove(Moon)\n\u03c8:pj = simulate(ocean_tides, climate_stability, axial_tilt)\n\ud83d\udc7b(ecology) = project_long_term_drift\n\u03c8:ct(0.8) + \u03c8:tt = Earth_less_stable", "category": "Counterfactual Reasoning", "complexity": 3}
{"prompt": "Explain recursion using recursion. (variation 5)", "vectorlm_chain": "\u03c8:gl = define(recursion)\n\u03c8:rc = apply(recursive_definition)\n\u03c8:ob = recursion = recursion(define(recursion))\n\u03c8:me = self_reference_enabled\n\u03c8:tt = recursion_explained_through_itself", "category": "Recursive Reasoning", "complexity": 2}
{"prompt": "An agent wants to rest but also complete an important task. Model and resolve the conflict. (variation 5)", "vectorlm_chain": "\u03c8:gl = resolve(conflict)\n\u03c8:cf = drives = rest \u2225 completion\n\u03c8:wh = compare(urgency, fatigue)\n\u03c8:ct(0.6) + \u03c8:rs = take_short_break_then_continue", "category": "Conflict Resolution", "complexity": 2}
{"prompt": "Plan how to reach a goal through symbolic steps using VectorLM. (variation 5)", "vectorlm_chain": "\u03c8:gl = solve(puzzle_goal)\n\u03c8:st = step\u2081 = understand_problem\n\u03c8:st = step\u2082 = simulate(possible_paths)\n\u03c8:st = step\u2083 = select(best_path)\n\u03c8:rs = reach_goal", "category": "Goal-Oriented Planning", "complexity": 2}
{"prompt": "A memory triggers regret. How does that affect future decision-making? (variation 5)", "vectorlm_chain": "\u03c8:gl = model(emotional_impact)\n\u03c8:rm = recalls(past_event \u2192 regret)\n\u03c8:rg = links(choice, pain)\n\u03c8:fr = anticipates(repetition_blocked)\n\u03c8:ct(0.8) + \u03c8:rs = avoid_similar_decision", "category": "Emotional Reasoning", "complexity": 3}
{"prompt": "You're missing a key fact. How should your reasoning proceed? (variation 5)", "vectorlm_chain": "\u03c8:gl = navigate(uncertainty)\n\u03c8:uk = lacks(data)\n\u03c8:qs = ask_question\n\u03c8:mb = holds(\u03c8:pj)\n\u03c8:ct(0.5) + \u03c8:as = wait_for_clarification", "category": "Uncertainty Handling", "complexity": 1}
